/*
 * generated by Xtext
 */
package dk.itu.mdd.configurator.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import dk.itu.mdd.configurator.services.ConfGrammarAccess;

public class ConfParser extends AbstractContentAssistParser {
	
	@Inject
	private ConfGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected dk.itu.mdd.configurator.ui.contentassist.antlr.internal.InternalConfParser createParser() {
		dk.itu.mdd.configurator.ui.contentassist.antlr.internal.InternalConfParser result = new dk.itu.mdd.configurator.ui.contentassist.antlr.internal.InternalConfParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new dk.itu.mdd.configurator.ui.parser.antlr.ConfTokenSource(super.createLexer(stream));
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getSolitaryAccess().getAlternatives(), "rule__Solitary__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getUnaryAccess().getOperatorAlternatives_1_0(), "rule__Unary__OperatorAlternatives_1_0");
					put(grammarAccess.getGroupAccess().getAlternatives(), "rule__Group__Alternatives");
					put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEqualityOperatorAccess().getAlternatives(), "rule__EqualityOperator__Alternatives");
					put(grammarAccess.getComparativeOperatorAccess().getAlternatives(), "rule__ComparativeOperator__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getDisjunctionAccess().getGroup(), "rule__Disjunction__Group__0");
					put(grammarAccess.getDisjunctionAccess().getGroup_1(), "rule__Disjunction__Group_1__0");
					put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup_1(), "rule__Conjunction__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getBinaryAccess().getGroup(), "rule__Binary__Group__0");
					put(grammarAccess.getBinaryAccess().getGroup_1(), "rule__Binary__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
					put(grammarAccess.getUnaryAccess().getGroup(), "rule__Unary__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getFeature_ImplAccess().getGroup(), "rule__Feature_Impl__Group__0");
					put(grammarAccess.getFeature_ImplAccess().getGroup_2(), "rule__Feature_Impl__Group_2__0");
					put(grammarAccess.getFeature_ImplAccess().getGroup_3(), "rule__Feature_Impl__Group_3__0");
					put(grammarAccess.getFeature_ImplAccess().getGroup_3_2(), "rule__Feature_Impl__Group_3_2__0");
					put(grammarAccess.getGroupedAccess().getGroup(), "rule__Grouped__Group__0");
					put(grammarAccess.getGroupedAccess().getGroup_1(), "rule__Grouped__Group_1__0");
					put(grammarAccess.getGroupedAccess().getGroup_2(), "rule__Grouped__Group_2__0");
					put(grammarAccess.getGroupedAccess().getGroup_2_2(), "rule__Grouped__Group_2_2__0");
					put(grammarAccess.getMandatoryAccess().getGroup(), "rule__Mandatory__Group__0");
					put(grammarAccess.getMandatoryAccess().getGroup_1(), "rule__Mandatory__Group_1__0");
					put(grammarAccess.getMandatoryAccess().getGroup_1_2(), "rule__Mandatory__Group_1_2__0");
					put(grammarAccess.getMandatoryAccess().getGroup_2(), "rule__Mandatory__Group_2__0");
					put(grammarAccess.getMandatoryAccess().getGroup_3(), "rule__Mandatory__Group_3__0");
					put(grammarAccess.getMandatoryAccess().getGroup_3_2(), "rule__Mandatory__Group_3_2__0");
					put(grammarAccess.getMandatoryAccess().getGroup_4(), "rule__Mandatory__Group_4__0");
					put(grammarAccess.getOptionalAccess().getGroup(), "rule__Optional__Group__0");
					put(grammarAccess.getOptionalAccess().getGroup_2(), "rule__Optional__Group_2__0");
					put(grammarAccess.getOptionalAccess().getGroup_2_2(), "rule__Optional__Group_2_2__0");
					put(grammarAccess.getOptionalAccess().getGroup_3(), "rule__Optional__Group_3__0");
					put(grammarAccess.getOptionalAccess().getGroup_4(), "rule__Optional__Group_4__0");
					put(grammarAccess.getOptionalAccess().getGroup_4_2(), "rule__Optional__Group_4_2__0");
					put(grammarAccess.getOptionalAccess().getGroup_5(), "rule__Optional__Group_5__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_2(), "rule__Or__Group_2__0");
					put(grammarAccess.getOrAccess().getGroup_2_2(), "rule__Or__Group_2_2__0");
					put(grammarAccess.getXorAccess().getGroup(), "rule__Xor__Group__0");
					put(grammarAccess.getXorAccess().getGroup_2(), "rule__Xor__Group_2__0");
					put(grammarAccess.getXorAccess().getGroup_2_2(), "rule__Xor__Group_2_2__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getRootAssignment_2(), "rule__Model__RootAssignment_2");
					put(grammarAccess.getDisjunctionAccess().getOperatorAssignment_1_1(), "rule__Disjunction__OperatorAssignment_1_1");
					put(grammarAccess.getDisjunctionAccess().getRightExpAssignment_1_2(), "rule__Disjunction__RightExpAssignment_1_2");
					put(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_1(), "rule__Conjunction__OperatorAssignment_1_1");
					put(grammarAccess.getConjunctionAccess().getRightExpAssignment_1_2(), "rule__Conjunction__RightExpAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOperatorAssignment_1_1(), "rule__Equality__OperatorAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightExpAssignment_1_2(), "rule__Equality__RightExpAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOperatorAssignment_1_1(), "rule__Comparison__OperatorAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightExpAssignment_1_2(), "rule__Comparison__RightExpAssignment_1_2");
					put(grammarAccess.getBinaryAccess().getRightExpAssignment_1_1(), "rule__Binary__RightExpAssignment_1_1");
					put(grammarAccess.getPrimaryAccess().getFeatureReferenceAssignment_0(), "rule__Primary__FeatureReferenceAssignment_0");
					put(grammarAccess.getAttributeConstrainAccess().getConstrainValueAssignment(), "rule__AttributeConstrain__ConstrainValueAssignment");
					put(grammarAccess.getUnaryAccess().getOperatorAssignment_1(), "rule__Unary__OperatorAssignment_1");
					put(grammarAccess.getUnaryAccess().getExpAssignment_2(), "rule__Unary__ExpAssignment_2");
					put(grammarAccess.getRangeAccess().getLowerAssignment_0(), "rule__Range__LowerAssignment_0");
					put(grammarAccess.getRangeAccess().getUpperAssignment_1(), "rule__Range__UpperAssignment_1");
					put(grammarAccess.getCStringAccess().getValueAssignment(), "rule__CString__ValueAssignment");
					put(grammarAccess.getCBooleanAccess().getValueAssignment(), "rule__CBoolean__ValueAssignment");
					put(grammarAccess.getNumberAccess().getValueAssignment(), "rule__Number__ValueAssignment");
					put(grammarAccess.getFeature_ImplAccess().getNameAssignment_1(), "rule__Feature_Impl__NameAssignment_1");
					put(grammarAccess.getFeature_ImplAccess().getSubfeatureAssignment_2_1(), "rule__Feature_Impl__SubfeatureAssignment_2_1");
					put(grammarAccess.getFeature_ImplAccess().getSubfeatureAssignment_2_2(), "rule__Feature_Impl__SubfeatureAssignment_2_2");
					put(grammarAccess.getFeature_ImplAccess().getConstrainsAssignment_3_1(), "rule__Feature_Impl__ConstrainsAssignment_3_1");
					put(grammarAccess.getFeature_ImplAccess().getConstrainsAssignment_3_2_1(), "rule__Feature_Impl__ConstrainsAssignment_3_2_1");
					put(grammarAccess.getGroupedAccess().getNameAssignment_0(), "rule__Grouped__NameAssignment_0");
					put(grammarAccess.getGroupedAccess().getAttributeAssignment_1_1(), "rule__Grouped__AttributeAssignment_1_1");
					put(grammarAccess.getGroupedAccess().getConstrainsAssignment_2_1(), "rule__Grouped__ConstrainsAssignment_2_1");
					put(grammarAccess.getGroupedAccess().getConstrainsAssignment_2_2_1(), "rule__Grouped__ConstrainsAssignment_2_2_1");
					put(grammarAccess.getMandatoryAccess().getNameAssignment_0(), "rule__Mandatory__NameAssignment_0");
					put(grammarAccess.getMandatoryAccess().getSubfeatureAssignment_1_1(), "rule__Mandatory__SubfeatureAssignment_1_1");
					put(grammarAccess.getMandatoryAccess().getSubfeatureAssignment_1_2_1(), "rule__Mandatory__SubfeatureAssignment_1_2_1");
					put(grammarAccess.getMandatoryAccess().getAttributeAssignment_2_1(), "rule__Mandatory__AttributeAssignment_2_1");
					put(grammarAccess.getMandatoryAccess().getConstrainsAssignment_3_1(), "rule__Mandatory__ConstrainsAssignment_3_1");
					put(grammarAccess.getMandatoryAccess().getConstrainsAssignment_3_2_1(), "rule__Mandatory__ConstrainsAssignment_3_2_1");
					put(grammarAccess.getMandatoryAccess().getGroupsAssignment_4_0(), "rule__Mandatory__GroupsAssignment_4_0");
					put(grammarAccess.getMandatoryAccess().getGroupsAssignment_4_1(), "rule__Mandatory__GroupsAssignment_4_1");
					put(grammarAccess.getOptionalAccess().getNameAssignment_1(), "rule__Optional__NameAssignment_1");
					put(grammarAccess.getOptionalAccess().getSubfeatureAssignment_2_1(), "rule__Optional__SubfeatureAssignment_2_1");
					put(grammarAccess.getOptionalAccess().getSubfeatureAssignment_2_2_1(), "rule__Optional__SubfeatureAssignment_2_2_1");
					put(grammarAccess.getOptionalAccess().getAttributeAssignment_3_1(), "rule__Optional__AttributeAssignment_3_1");
					put(grammarAccess.getOptionalAccess().getConstrainsAssignment_4_1(), "rule__Optional__ConstrainsAssignment_4_1");
					put(grammarAccess.getOptionalAccess().getConstrainsAssignment_4_2_1(), "rule__Optional__ConstrainsAssignment_4_2_1");
					put(grammarAccess.getOptionalAccess().getGroupsAssignment_5_0(), "rule__Optional__GroupsAssignment_5_0");
					put(grammarAccess.getOptionalAccess().getGroupsAssignment_5_1(), "rule__Optional__GroupsAssignment_5_1");
					put(grammarAccess.getOrAccess().getNameAssignment_1(), "rule__Or__NameAssignment_1");
					put(grammarAccess.getOrAccess().getGroupedAssignment_2_1(), "rule__Or__GroupedAssignment_2_1");
					put(grammarAccess.getOrAccess().getGroupedAssignment_2_2_1(), "rule__Or__GroupedAssignment_2_2_1");
					put(grammarAccess.getXorAccess().getNameAssignment_1(), "rule__Xor__NameAssignment_1");
					put(grammarAccess.getXorAccess().getGroupedAssignment_2_1(), "rule__Xor__GroupedAssignment_2_1");
					put(grammarAccess.getXorAccess().getGroupedAssignment_2_2_1(), "rule__Xor__GroupedAssignment_2_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			dk.itu.mdd.configurator.ui.contentassist.antlr.internal.InternalConfParser typedParser = (dk.itu.mdd.configurator.ui.contentassist.antlr.internal.InternalConfParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ConfGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ConfGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
