/*
 * generated by Xtext
 */
parser grammar InternalConfParser;

options {
	tokenVocab=InternalConfLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package dk.itu.mdd.configurator.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import dk.itu.mdd.configurator.services.ConfGrammarAccess;

}

@members {
 
 	private ConfGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("QuestionMark", "'?'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("AmpersandAmpersand", "'&&'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("Or", "'Or'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("Xor", "'Xor'");
		tokenNameToValue.put("Feature", "'Feature'");
 	}
 	
    public void setGrammarAccess(ConfGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModelAccess().getRootAssignment()); }
(rule__Model__RootAssignment)
{ after(grammarAccess.getModelAccess().getRootAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleSolitary
entryRuleSolitary 
:
{ before(grammarAccess.getSolitaryRule()); }
	 ruleSolitary
{ after(grammarAccess.getSolitaryRule()); } 
	 EOF 
;

// Rule Solitary
ruleSolitary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSolitaryAccess().getAlternatives()); }
(rule__Solitary__Alternatives)
{ after(grammarAccess.getSolitaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstrain
entryRuleConstrain 
:
{ before(grammarAccess.getConstrainRule()); }
	 ruleConstrain
{ after(grammarAccess.getConstrainRule()); } 
	 EOF 
;

// Rule Constrain
ruleConstrain 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConstrainAccess().getGroup()); }
(rule__Constrain__Group__0)
{ after(grammarAccess.getConstrainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConjunction
entryRuleConjunction 
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConjunctionAccess().getGroup()); }
(rule__Conjunction__Group__0)
{ after(grammarAccess.getConjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinary
entryRuleBinary 
:
{ before(grammarAccess.getBinaryRule()); }
	 ruleBinary
{ after(grammarAccess.getBinaryRule()); } 
	 EOF 
;

// Rule Binary
ruleBinary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBinaryAccess().getGroup()); }
(rule__Binary__Group__0)
{ after(grammarAccess.getBinaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnary
entryRuleUnary 
:
{ before(grammarAccess.getUnaryRule()); }
	 ruleUnary
{ after(grammarAccess.getUnaryRule()); } 
	 EOF 
;

// Rule Unary
ruleUnary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaryAccess().getGroup()); }
(rule__Unary__Group__0)
{ after(grammarAccess.getUnaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroup
entryRuleGroup 
:
{ before(grammarAccess.getGroupRule()); }
	 ruleGroup
{ after(grammarAccess.getGroupRule()); } 
	 EOF 
;

// Rule Group
ruleGroup 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupAccess().getAlternatives()); }
(rule__Group__Alternatives)
{ after(grammarAccess.getGroupAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeature_Impl
entryRuleFeature_Impl 
:
{ before(grammarAccess.getFeature_ImplRule()); }
	 ruleFeature_Impl
{ after(grammarAccess.getFeature_ImplRule()); } 
	 EOF 
;

// Rule Feature_Impl
ruleFeature_Impl 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFeature_ImplAccess().getGroup()); }
(rule__Feature_Impl__Group__0)
{ after(grammarAccess.getFeature_ImplAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGrouped
entryRuleGrouped 
:
{ before(grammarAccess.getGroupedRule()); }
	 ruleGrouped
{ after(grammarAccess.getGroupedRule()); } 
	 EOF 
;

// Rule Grouped
ruleGrouped 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupedAccess().getGroup()); }
(rule__Grouped__Group__0)
{ after(grammarAccess.getGroupedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMandatory
entryRuleMandatory 
:
{ before(grammarAccess.getMandatoryRule()); }
	 ruleMandatory
{ after(grammarAccess.getMandatoryRule()); } 
	 EOF 
;

// Rule Mandatory
ruleMandatory 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMandatoryAccess().getGroup()); }
(rule__Mandatory__Group__0)
{ after(grammarAccess.getMandatoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOptional
entryRuleOptional 
:
{ before(grammarAccess.getOptionalRule()); }
	 ruleOptional
{ after(grammarAccess.getOptionalRule()); } 
	 EOF 
;

// Rule Optional
ruleOptional 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOptionalAccess().getGroup()); }
(rule__Optional__Group__0)
{ after(grammarAccess.getOptionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOr
entryRuleOr 
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXor
entryRuleXor 
:
{ before(grammarAccess.getXorRule()); }
	 ruleXor
{ after(grammarAccess.getXorRule()); } 
	 EOF 
;

// Rule Xor
ruleXor 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXorAccess().getGroup()); }
(rule__Xor__Group__0)
{ after(grammarAccess.getXorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Solitary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSolitaryAccess().getMandatoryParserRuleCall_0()); }
	ruleMandatory
{ after(grammarAccess.getSolitaryAccess().getMandatoryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSolitaryAccess().getOptionalParserRuleCall_1()); }
	ruleOptional
{ after(grammarAccess.getSolitaryAccess().getOptionalParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }

	EqualsSignEqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }

	ExclamationMarkEqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2()); }

	LessThanSignEqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_1_1_0_3()); }

	LessThanSign 

{ after(grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_1_1_0_3()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_4()); }

	GreaterThanSignEqualsSign 

{ after(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_4()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_1_1_0_5()); }

	GreaterThanSign 

{ after(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_1_1_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
(rule__Primary__Group_0__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getUnaryParserRuleCall_1()); }
	ruleUnary
{ after(grammarAccess.getPrimaryAccess().getUnaryParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
(rule__Primary__Group_2__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__OperatorAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOperatorExclamationMarkKeyword_1_0_0()); }

	ExclamationMark 

{ after(grammarAccess.getUnaryAccess().getOperatorExclamationMarkKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryAccess().getOperatorHyphenMinusKeyword_1_0_1()); }

	HyphenMinus 

{ after(grammarAccess.getUnaryAccess().getOperatorHyphenMinusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Group__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupAccess().getOrParserRuleCall_0()); }
	ruleOr
{ after(grammarAccess.getGroupAccess().getOrParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGroupAccess().getXorParserRuleCall_1()); }
	ruleXor
{ after(grammarAccess.getGroupAccess().getXorParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getNULLTerminalRuleCall_2()); }
	RULE_NULL
{ after(grammarAccess.getEStringAccess().getNULLTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Constrain__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constrain__Group__0__Impl
	rule__Constrain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constrain__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainAccess().getConjunctionParserRuleCall_0()); }
	ruleConjunction
{ after(grammarAccess.getConstrainAccess().getConjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constrain__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constrain__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constrain__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainAccess().getGroup_1()); }
(rule__Constrain__Group_1__0)*
{ after(grammarAccess.getConstrainAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constrain__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constrain__Group_1__0__Impl
	rule__Constrain__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constrain__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainAccess().getBinaryLeftExpAction_1_0()); }
(

)
{ after(grammarAccess.getConstrainAccess().getBinaryLeftExpAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constrain__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constrain__Group_1__1__Impl
	rule__Constrain__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constrain__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainAccess().getOperatorAssignment_1_1()); }
(rule__Constrain__OperatorAssignment_1_1)
{ after(grammarAccess.getConstrainAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constrain__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constrain__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constrain__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainAccess().getRightExpAssignment_1_2()); }
(rule__Constrain__RightExpAssignment_1_2)
{ after(grammarAccess.getConstrainAccess().getRightExpAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Conjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
{ after(grammarAccess.getConjunctionAccess().getComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
(rule__Conjunction__Group_1__0)*
{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getBinaryLeftExpAction_1_0()); }
(

)
{ after(grammarAccess.getConjunctionAccess().getBinaryLeftExpAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__1__Impl
	rule__Conjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_1()); }
(rule__Conjunction__OperatorAssignment_1_1)
{ after(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightExpAssignment_1_2()); }
(rule__Conjunction__RightExpAssignment_1_2)
{ after(grammarAccess.getConjunctionAccess().getRightExpAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getBinaryParserRuleCall_0()); }
	ruleBinary
{ after(grammarAccess.getComparisonAccess().getBinaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)*
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getBinaryLeftExpAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getBinaryLeftExpAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAssignment_1_1()); }
(rule__Comparison__OperatorAssignment_1_1)
{ after(grammarAccess.getComparisonAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightExpAssignment_1_2()); }
(rule__Comparison__RightExpAssignment_1_2)
{ after(grammarAccess.getComparisonAccess().getRightExpAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Binary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group__0__Impl
	rule__Binary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getBinaryAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getGroup_1()); }
(rule__Binary__Group_1__0)*
{ after(grammarAccess.getBinaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Binary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group_1__0__Impl
	rule__Binary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getBinaryLeftExpAction_1_0()); }
(

)
{ after(grammarAccess.getBinaryAccess().getBinaryLeftExpAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getRightExpAssignment_1_1()); }
(rule__Binary__RightExpAssignment_1_1)
{ after(grammarAccess.getBinaryAccess().getRightExpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Primary__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getConstrainFeaturesAssignment_0_0()); }
(rule__Primary__ConstrainFeaturesAssignment_0_0)
{ after(grammarAccess.getPrimaryAccess().getConstrainFeaturesAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getGroup_0_1()); }
(rule__Primary__Group_0_1__0)*
{ after(grammarAccess.getPrimaryAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Primary__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0_1__0__Impl
	rule__Primary__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getFullStopKeyword_0_1_0()); }

	FullStop 

{ after(grammarAccess.getPrimaryAccess().getFullStopKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getConstrainFeaturesAssignment_0_1_1()); }
(rule__Primary__ConstrainFeaturesAssignment_0_1_1)
{ after(grammarAccess.getPrimaryAccess().getConstrainFeaturesAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Primary__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }

	LeftParenthesis 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getConstrainParserRuleCall_2_1()); }
	ruleConstrain
{ after(grammarAccess.getPrimaryAccess().getConstrainParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }

	RightParenthesis 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Unary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group__0__Impl
	rule__Unary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getUnaryAction_0()); }
(

)
{ after(grammarAccess.getUnaryAccess().getUnaryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group__1__Impl
	rule__Unary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOperatorAssignment_1()); }
(rule__Unary__OperatorAssignment_1)
{ after(grammarAccess.getUnaryAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getExpAssignment_2()); }
(rule__Unary__ExpAssignment_2)
{ after(grammarAccess.getUnaryAccess().getExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Feature_Impl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group__0__Impl
	rule__Feature_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getFeatureKeyword_0()); }

	Feature 

{ after(grammarAccess.getFeature_ImplAccess().getFeatureKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group__1__Impl
	rule__Feature_Impl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getNameAssignment_1()); }
(rule__Feature_Impl__NameAssignment_1)
{ after(grammarAccess.getFeature_ImplAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group__2__Impl
	rule__Feature_Impl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getGroup_2()); }
(rule__Feature_Impl__Group_2__0)?
{ after(grammarAccess.getFeature_ImplAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getGroup_3()); }
(rule__Feature_Impl__Group_3__0)?
{ after(grammarAccess.getFeature_ImplAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Feature_Impl__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_2__0__Impl
	rule__Feature_Impl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getBEGINTerminalRuleCall_2_0()); }
	RULE_BEGIN
{ after(grammarAccess.getFeature_ImplAccess().getBEGINTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_2__1__Impl
	rule__Feature_Impl__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getSubfeatureAssignment_2_1()); }
(rule__Feature_Impl__SubfeatureAssignment_2_1)
{ after(grammarAccess.getFeature_ImplAccess().getSubfeatureAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_2__2__Impl
	rule__Feature_Impl__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getSubfeatureAssignment_2_2()); }
(rule__Feature_Impl__SubfeatureAssignment_2_2)*
{ after(grammarAccess.getFeature_ImplAccess().getSubfeatureAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getENDTerminalRuleCall_2_3()); }
	RULE_END
{ after(grammarAccess.getFeature_ImplAccess().getENDTerminalRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Feature_Impl__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_3__0__Impl
	rule__Feature_Impl__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getLeftSquareBracketKeyword_3_0()); }

	LeftSquareBracket 

{ after(grammarAccess.getFeature_ImplAccess().getLeftSquareBracketKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_3__1__Impl
	rule__Feature_Impl__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getConstrainsAssignment_3_1()); }
(rule__Feature_Impl__ConstrainsAssignment_3_1)
{ after(grammarAccess.getFeature_ImplAccess().getConstrainsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_3__2__Impl
	rule__Feature_Impl__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getGroup_3_2()); }
(rule__Feature_Impl__Group_3_2__0)*
{ after(grammarAccess.getFeature_ImplAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getRightSquareBracketKeyword_3_3()); }

	RightSquareBracket 

{ after(grammarAccess.getFeature_ImplAccess().getRightSquareBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Feature_Impl__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_3_2__0__Impl
	rule__Feature_Impl__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getCommaKeyword_3_2_0()); }

	Comma 

{ after(grammarAccess.getFeature_ImplAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature_Impl__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature_Impl__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getConstrainsAssignment_3_2_1()); }
(rule__Feature_Impl__ConstrainsAssignment_3_2_1)
{ after(grammarAccess.getFeature_ImplAccess().getConstrainsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Grouped__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grouped__Group__0__Impl
	rule__Grouped__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getNameAssignment_0()); }
(rule__Grouped__NameAssignment_0)
{ after(grammarAccess.getGroupedAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grouped__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grouped__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getGroup_1()); }
(rule__Grouped__Group_1__0)?
{ after(grammarAccess.getGroupedAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Grouped__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grouped__Group_1__0__Impl
	rule__Grouped__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getLeftSquareBracketKeyword_1_0()); }

	LeftSquareBracket 

{ after(grammarAccess.getGroupedAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grouped__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grouped__Group_1__1__Impl
	rule__Grouped__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getConstrainsAssignment_1_1()); }
(rule__Grouped__ConstrainsAssignment_1_1)
{ after(grammarAccess.getGroupedAccess().getConstrainsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grouped__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grouped__Group_1__2__Impl
	rule__Grouped__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getGroup_1_2()); }
(rule__Grouped__Group_1_2__0)*
{ after(grammarAccess.getGroupedAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grouped__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grouped__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getRightSquareBracketKeyword_1_3()); }

	RightSquareBracket 

{ after(grammarAccess.getGroupedAccess().getRightSquareBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Grouped__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grouped__Group_1_2__0__Impl
	rule__Grouped__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getCommaKeyword_1_2_0()); }

	Comma 

{ after(grammarAccess.getGroupedAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grouped__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grouped__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getConstrainsAssignment_1_2_1()); }
(rule__Grouped__ConstrainsAssignment_1_2_1)
{ after(grammarAccess.getGroupedAccess().getConstrainsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mandatory__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group__0__Impl
	rule__Mandatory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getNameAssignment_0()); }
(rule__Mandatory__NameAssignment_0)
{ after(grammarAccess.getMandatoryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group__1__Impl
	rule__Mandatory__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroup_1()); }
(rule__Mandatory__Group_1__0)?
{ after(grammarAccess.getMandatoryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group__2__Impl
	rule__Mandatory__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroup_2()); }
(rule__Mandatory__Group_2__0)?
{ after(grammarAccess.getMandatoryAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroup_3()); }
(rule__Mandatory__Group_3__0)?
{ after(grammarAccess.getMandatoryAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Mandatory__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_1__0__Impl
	rule__Mandatory__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getLeftCurlyBracketKeyword_1_0()); }

	LeftCurlyBracket 

{ after(grammarAccess.getMandatoryAccess().getLeftCurlyBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_1__1__Impl
	rule__Mandatory__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getSubfeatureAssignment_1_1()); }
(rule__Mandatory__SubfeatureAssignment_1_1)
{ after(grammarAccess.getMandatoryAccess().getSubfeatureAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_1__2__Impl
	rule__Mandatory__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroup_1_2()); }
(rule__Mandatory__Group_1_2__0)*
{ after(grammarAccess.getMandatoryAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getRightCurlyBracketKeyword_1_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getMandatoryAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Mandatory__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_1_2__0__Impl
	rule__Mandatory__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getCommaKeyword_1_2_0()); }

	Comma 

{ after(grammarAccess.getMandatoryAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getSubfeatureAssignment_1_2_1()); }
(rule__Mandatory__SubfeatureAssignment_1_2_1)
{ after(grammarAccess.getMandatoryAccess().getSubfeatureAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mandatory__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_2__0__Impl
	rule__Mandatory__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getLeftSquareBracketKeyword_2_0()); }

	LeftSquareBracket 

{ after(grammarAccess.getMandatoryAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_2__1__Impl
	rule__Mandatory__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getConstrainsAssignment_2_1()); }
(rule__Mandatory__ConstrainsAssignment_2_1)
{ after(grammarAccess.getMandatoryAccess().getConstrainsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_2__2__Impl
	rule__Mandatory__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroup_2_2()); }
(rule__Mandatory__Group_2_2__0)*
{ after(grammarAccess.getMandatoryAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getRightSquareBracketKeyword_2_3()); }

	RightSquareBracket 

{ after(grammarAccess.getMandatoryAccess().getRightSquareBracketKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Mandatory__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_2_2__0__Impl
	rule__Mandatory__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getCommaKeyword_2_2_0()); }

	Comma 

{ after(grammarAccess.getMandatoryAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getConstrainsAssignment_2_2_1()); }
(rule__Mandatory__ConstrainsAssignment_2_2_1)
{ after(grammarAccess.getMandatoryAccess().getConstrainsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mandatory__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_3__0__Impl
	rule__Mandatory__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroupsAssignment_3_0()); }
(rule__Mandatory__GroupsAssignment_3_0)
{ after(grammarAccess.getMandatoryAccess().getGroupsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mandatory__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroupsAssignment_3_1()); }
(rule__Mandatory__GroupsAssignment_3_1)*
{ after(grammarAccess.getMandatoryAccess().getGroupsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Optional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__0__Impl
	rule__Optional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getQuestionMarkKeyword_0()); }

	QuestionMark 

{ after(grammarAccess.getOptionalAccess().getQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__1__Impl
	rule__Optional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getNameAssignment_1()); }
(rule__Optional__NameAssignment_1)
{ after(grammarAccess.getOptionalAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__2__Impl
	rule__Optional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroup_2()); }
(rule__Optional__Group_2__0)?
{ after(grammarAccess.getOptionalAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__3__Impl
	rule__Optional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroup_3()); }
(rule__Optional__Group_3__0)?
{ after(grammarAccess.getOptionalAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroup_4()); }
(rule__Optional__Group_4__0)?
{ after(grammarAccess.getOptionalAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Optional__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_2__0__Impl
	rule__Optional__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getLeftCurlyBracketKeyword_2_0()); }

	LeftCurlyBracket 

{ after(grammarAccess.getOptionalAccess().getLeftCurlyBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_2__1__Impl
	rule__Optional__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getSubfeatureAssignment_2_1()); }
(rule__Optional__SubfeatureAssignment_2_1)
{ after(grammarAccess.getOptionalAccess().getSubfeatureAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_2__2__Impl
	rule__Optional__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroup_2_2()); }
(rule__Optional__Group_2_2__0)*
{ after(grammarAccess.getOptionalAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getRightCurlyBracketKeyword_2_3()); }

	RightCurlyBracket 

{ after(grammarAccess.getOptionalAccess().getRightCurlyBracketKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Optional__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_2_2__0__Impl
	rule__Optional__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getCommaKeyword_2_2_0()); }

	Comma 

{ after(grammarAccess.getOptionalAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getSubfeatureAssignment_2_2_1()); }
(rule__Optional__SubfeatureAssignment_2_2_1)
{ after(grammarAccess.getOptionalAccess().getSubfeatureAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Optional__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_3__0__Impl
	rule__Optional__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getLeftSquareBracketKeyword_3_0()); }

	LeftSquareBracket 

{ after(grammarAccess.getOptionalAccess().getLeftSquareBracketKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_3__1__Impl
	rule__Optional__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getConstrainsAssignment_3_1()); }
(rule__Optional__ConstrainsAssignment_3_1)
{ after(grammarAccess.getOptionalAccess().getConstrainsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_3__2__Impl
	rule__Optional__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroup_3_2()); }
(rule__Optional__Group_3_2__0)*
{ after(grammarAccess.getOptionalAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getRightSquareBracketKeyword_3_3()); }

	RightSquareBracket 

{ after(grammarAccess.getOptionalAccess().getRightSquareBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Optional__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_3_2__0__Impl
	rule__Optional__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getCommaKeyword_3_2_0()); }

	Comma 

{ after(grammarAccess.getOptionalAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getConstrainsAssignment_3_2_1()); }
(rule__Optional__ConstrainsAssignment_3_2_1)
{ after(grammarAccess.getOptionalAccess().getConstrainsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Optional__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_4__0__Impl
	rule__Optional__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroupsAssignment_4_0()); }
(rule__Optional__GroupsAssignment_4_0)
{ after(grammarAccess.getOptionalAccess().getGroupsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroupsAssignment_4_1()); }
(rule__Optional__GroupsAssignment_4_1)*
{ after(grammarAccess.getOptionalAccess().getGroupsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrKeyword_0()); }

	Or 

{ after(grammarAccess.getOrAccess().getOrKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
	rule__Or__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getNameAssignment_1()); }
(rule__Or__NameAssignment_1)
{ after(grammarAccess.getOrAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_2()); }
(rule__Or__Group_2__0)?
{ after(grammarAccess.getOrAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Or__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_2__0__Impl
	rule__Or__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getBEGINTerminalRuleCall_2_0()); }
	RULE_BEGIN
{ after(grammarAccess.getOrAccess().getBEGINTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_2__1__Impl
	rule__Or__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroupedAssignment_2_1()); }
(rule__Or__GroupedAssignment_2_1)
{ after(grammarAccess.getOrAccess().getGroupedAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_2__2__Impl
	rule__Or__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_2_2()); }
(rule__Or__Group_2_2__0)*
{ after(grammarAccess.getOrAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getENDTerminalRuleCall_2_3()); }
	RULE_END
{ after(grammarAccess.getOrAccess().getENDTerminalRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Or__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_2_2__0__Impl
	rule__Or__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getCommaKeyword_2_2_0()); }
(
	Comma 
)*
{ after(grammarAccess.getOrAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroupedAssignment_2_2_1()); }
(rule__Or__GroupedAssignment_2_2_1)
{ after(grammarAccess.getOrAccess().getGroupedAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Xor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group__0__Impl
	rule__Xor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getXorKeyword_0()); }

	Xor 

{ after(grammarAccess.getXorAccess().getXorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group__1__Impl
	rule__Xor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getNameAssignment_1()); }
(rule__Xor__NameAssignment_1)
{ after(grammarAccess.getXorAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getGroup_2()); }
(rule__Xor__Group_2__0)?
{ after(grammarAccess.getXorAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Xor__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group_2__0__Impl
	rule__Xor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getBEGINTerminalRuleCall_2_0()); }
	RULE_BEGIN
{ after(grammarAccess.getXorAccess().getBEGINTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group_2__1__Impl
	rule__Xor__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getGroupedAssignment_2_1()); }
(rule__Xor__GroupedAssignment_2_1)
{ after(grammarAccess.getXorAccess().getGroupedAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group_2__2__Impl
	rule__Xor__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getGroup_2_2()); }
(rule__Xor__Group_2_2__0)*
{ after(grammarAccess.getXorAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getENDTerminalRuleCall_2_3()); }
	RULE_END
{ after(grammarAccess.getXorAccess().getENDTerminalRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Xor__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group_2_2__0__Impl
	rule__Xor__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getCommaKeyword_2_2_0()); }
(
	Comma 
)*
{ after(grammarAccess.getXorAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Xor__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getGroupedAssignment_2_2_1()); }
(rule__Xor__GroupedAssignment_2_2_1)
{ after(grammarAccess.getXorAccess().getGroupedAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__RootAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRootFeature_ImplParserRuleCall_0()); }
	ruleFeature_Impl{ after(grammarAccess.getModelAccess().getRootFeature_ImplParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constrain__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
(
{ before(grammarAccess.getConstrainAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }

	VerticalLineVerticalLine 

{ after(grammarAccess.getConstrainAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
)

{ after(grammarAccess.getConstrainAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constrain__RightExpAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainAccess().getRightExpConjunctionParserRuleCall_1_2_0()); }
	ruleConjunction{ after(grammarAccess.getConstrainAccess().getRightExpConjunctionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
(
{ before(grammarAccess.getConjunctionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }

	AmpersandAmpersand 

{ after(grammarAccess.getConjunctionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
)

{ after(grammarAccess.getConjunctionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightExpAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightExpComparisonParserRuleCall_1_2_0()); }
	ruleComparison{ after(grammarAccess.getConjunctionAccess().getRightExpComparisonParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAlternatives_1_1_0()); }
(rule__Comparison__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getComparisonAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightExpAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightExpBinaryParserRuleCall_1_2_0()); }
	ruleBinary{ after(grammarAccess.getComparisonAccess().getRightExpBinaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__RightExpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getRightExpPrimaryParserRuleCall_1_1_0()); }
	rulePrimary{ after(grammarAccess.getBinaryAccess().getRightExpPrimaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ConstrainFeaturesAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getConstrainFeaturesFeatureCrossReference_0_0_0()); }
(
{ before(grammarAccess.getPrimaryAccess().getConstrainFeaturesFeatureEStringParserRuleCall_0_0_0_1()); }
	ruleEString{ after(grammarAccess.getPrimaryAccess().getConstrainFeaturesFeatureEStringParserRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getPrimaryAccess().getConstrainFeaturesFeatureCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ConstrainFeaturesAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getConstrainFeaturesFeatureCrossReference_0_1_1_0()); }
(
{ before(grammarAccess.getPrimaryAccess().getConstrainFeaturesFeatureEStringParserRuleCall_0_1_1_0_1()); }
	ruleEString{ after(grammarAccess.getPrimaryAccess().getConstrainFeaturesFeatureEStringParserRuleCall_0_1_1_0_1()); }
)
{ after(grammarAccess.getPrimaryAccess().getConstrainFeaturesFeatureCrossReference_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOperatorAlternatives_1_0()); }
(rule__Unary__OperatorAlternatives_1_0)
{ after(grammarAccess.getUnaryAccess().getOperatorAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getExpPrimaryParserRuleCall_2_0()); }
	rulePrimary{ after(grammarAccess.getUnaryAccess().getExpPrimaryParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getFeature_ImplAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__SubfeatureAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getSubfeatureSolitaryParserRuleCall_2_1_0()); }
	ruleSolitary{ after(grammarAccess.getFeature_ImplAccess().getSubfeatureSolitaryParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__SubfeatureAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getSubfeatureSolitaryParserRuleCall_2_2_0()); }
	ruleSolitary{ after(grammarAccess.getFeature_ImplAccess().getSubfeatureSolitaryParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__ConstrainsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getConstrainsConstrainParserRuleCall_3_1_0()); }
	ruleConstrain{ after(grammarAccess.getFeature_ImplAccess().getConstrainsConstrainParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature_Impl__ConstrainsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeature_ImplAccess().getConstrainsConstrainParserRuleCall_3_2_1_0()); }
	ruleConstrain{ after(grammarAccess.getFeature_ImplAccess().getConstrainsConstrainParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getNameEStringParserRuleCall_0_0()); }
	ruleEString{ after(grammarAccess.getGroupedAccess().getNameEStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__ConstrainsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getConstrainsConstrainParserRuleCall_1_1_0()); }
	ruleConstrain{ after(grammarAccess.getGroupedAccess().getConstrainsConstrainParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Grouped__ConstrainsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupedAccess().getConstrainsConstrainParserRuleCall_1_2_1_0()); }
	ruleConstrain{ after(grammarAccess.getGroupedAccess().getConstrainsConstrainParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getNameEStringParserRuleCall_0_0()); }
	ruleEString{ after(grammarAccess.getMandatoryAccess().getNameEStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__SubfeatureAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getSubfeatureSolitaryParserRuleCall_1_1_0()); }
	ruleSolitary{ after(grammarAccess.getMandatoryAccess().getSubfeatureSolitaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__SubfeatureAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getSubfeatureSolitaryParserRuleCall_1_2_1_0()); }
	ruleSolitary{ after(grammarAccess.getMandatoryAccess().getSubfeatureSolitaryParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__ConstrainsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getConstrainsConstrainParserRuleCall_2_1_0()); }
	ruleConstrain{ after(grammarAccess.getMandatoryAccess().getConstrainsConstrainParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__ConstrainsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getConstrainsConstrainParserRuleCall_2_2_1_0()); }
	ruleConstrain{ after(grammarAccess.getMandatoryAccess().getConstrainsConstrainParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__GroupsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroupsGroupParserRuleCall_3_0_0()); }
	ruleGroup{ after(grammarAccess.getMandatoryAccess().getGroupsGroupParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__GroupsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMandatoryAccess().getGroupsGroupParserRuleCall_3_1_0()); }
	ruleGroup{ after(grammarAccess.getMandatoryAccess().getGroupsGroupParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getOptionalAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__SubfeatureAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getSubfeatureSolitaryParserRuleCall_2_1_0()); }
	ruleSolitary{ after(grammarAccess.getOptionalAccess().getSubfeatureSolitaryParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__SubfeatureAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getSubfeatureSolitaryParserRuleCall_2_2_1_0()); }
	ruleSolitary{ after(grammarAccess.getOptionalAccess().getSubfeatureSolitaryParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__ConstrainsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getConstrainsConstrainParserRuleCall_3_1_0()); }
	ruleConstrain{ after(grammarAccess.getOptionalAccess().getConstrainsConstrainParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__ConstrainsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getConstrainsConstrainParserRuleCall_3_2_1_0()); }
	ruleConstrain{ after(grammarAccess.getOptionalAccess().getConstrainsConstrainParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__GroupsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroupsGroupParserRuleCall_4_0_0()); }
	ruleGroup{ after(grammarAccess.getOptionalAccess().getGroupsGroupParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__GroupsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getGroupsGroupParserRuleCall_4_1_0()); }
	ruleGroup{ after(grammarAccess.getOptionalAccess().getGroupsGroupParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getOrAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__GroupedAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroupedGroupedParserRuleCall_2_1_0()); }
	ruleGrouped{ after(grammarAccess.getOrAccess().getGroupedGroupedParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__GroupedAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroupedGroupedParserRuleCall_2_2_1_0()); }
	ruleGrouped{ after(grammarAccess.getOrAccess().getGroupedGroupedParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getXorAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__GroupedAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getGroupedGroupedParserRuleCall_2_1_0()); }
	ruleGrouped{ after(grammarAccess.getXorAccess().getGroupedGroupedParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__GroupedAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorAccess().getGroupedGroupedParserRuleCall_2_2_1_0()); }
	ruleGrouped{ after(grammarAccess.getXorAccess().getGroupedGroupedParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


