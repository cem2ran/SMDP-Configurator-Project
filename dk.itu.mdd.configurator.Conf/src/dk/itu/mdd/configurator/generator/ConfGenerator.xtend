/*
 * generated by Xtext
 */
package dk.itu.mdd.configurator.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import modelMDD2.Model
import modelMDD2.Attribute
import modelMDD2.impl.OptionalImpl
import modelMDD2.impl.OrImpl
import modelMDD2.impl.XorImpl
import modelMDD2.Mandatory
import modelMDD2.impl.BinaryImpl
import modelMDD2.impl.UnaryImpl
import modelMDD2.impl.NumberImpl
import modelMDD2.impl.CStringImpl
import modelMDD2.CBoolean
import modelMDD2.Constrain
import modelMDD2.impl.CBooleanImpl
import modelMDD2.Range
import modelMDD2.impl.RangeImpl
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import modelMDD2.ModelMDD2Package
import org.emfjson.jackson.resource.JsonResourceFactory
import org.eclipse.emf.common.util.URI
import java.io.ByteArrayOutputStream
import java.util.ConcurrentModificationException

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ConfGenerator implements IGenerator {

	def static compileToJson(Model configurator) {
		
		val resourceSet = new ResourceSetImpl()
		resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put("*", new JsonResourceFactory())
		resourceSet.getPackageRegistry().put(ModelMDD2Package.eNS_URI, ModelMDD2Package.eINSTANCE)

		val res = resourceSet.createResource(URI.createURI("Configurator.json"))
		
		res.getContents().add(configurator)
		
		val os = new ByteArrayOutputStream()
		res.save(os, null)
		return os.toString
		
	}

	def static compileToHtml(Model configurator) {

		'''
			<html>
			<head>
			<style>
			.selectionArea{margin-left:25px;}
			h2{margin-left:10px;}
			h3{margin-left:25px;}
			[disabled] {
				cursor: no-drop;
			}
			</style>
			</head>
			<body>
			<form name=«configurator.root.name» onsubmit="" method="post">
			<h1>«configurator.root.name»</h1>
			«FOR feat : configurator.root.subfeature»
				«IF feat instanceof Mandatory»
					<h2>«feat.name»</h2>
					  «FOR group : feat.groups»
					  	<h3>«group.name»*</h3>
					  	«FOR groupedFeat : group.grouped»
					  		«val g = groupedFeat.attribute as Attribute»
					  		«IF group instanceof XorImpl»
					  			<input type="radio" id="«group.name»«groupedFeat.name»" class="selectionArea" name="«group.name»" value="«getAttributeValue(g)»" required onchange="validateForm()"><label for="«group.name»">«groupedFeat.name»</label></br>
					  		«ENDIF»
					  		«IF group instanceof OrImpl»
					  			<input type="checkbox" id="«group.name»" class="selectionArea" name="«group.name»«groupedFeat.name»" value="«getAttributeValue(g)»" required onchange="validateForm()"><label for="«group.name»«groupedFeat.name»">«groupedFeat.name»</label></br>
					  		«ENDIF»
					  	«ENDFOR»
					  «ENDFOR»
				«ENDIF»
				«IF feat instanceof OptionalImpl»
					Optional
					<h2>«feat.name»</h2>
					  «FOR group : feat.groups»
					  	<h3>«group.name»</h3>
					  	«FOR groupedFeat : group.grouped»
					  		«val g = groupedFeat.attribute as Attribute»
					  		«IF group instanceof XorImpl»
					  			<input type="radio" id="«group.name»«groupedFeat.name»" class="selectionArea" name="«group.name»" value="«getAttributeValue(g)»" onchange="validateForm()"><label for="«group.name»">«groupedFeat.name»</label></br>
					  		«ENDIF»
					  		«IF group instanceof OrImpl»
					  			<input type="checkbox" id="«group.name»" class="selectionArea" name="«group.name»«groupedFeat.name»" value="«getAttributeValue(g)»" onchange="validateForm()"><label for="«group.name»«groupedFeat.name»">«groupedFeat.name»</label></br>
					  		«ENDIF»
					  	«ENDFOR»
					  «ENDFOR»
				«ENDIF»
			«ENDFOR»
			<input type="submit" value="Submit">
			</form>
			<script type="text/javascript" src="./«configurator.root.name.toLowerCase»_configurator.js">
			</script>
			</body>
			</html>
		'''
	}

	def static compileToJavascript(Model configurator) {
		'''
			var form = document.forms['«configurator.root.name»'];
			  function validateForm() {
			 
			 
			 //check constraints
			 «FOR feat : configurator.root.subfeature»
			 	«FOR group : feat.groups»
			 		«IF group instanceof XorImpl»
			 			«FOR groupedFeat : group.grouped»
			 				document.getElementById('«group.name»«groupedFeat.name»').disabled = false;
			 				«FOR constraint : groupedFeat.constrains»
			 					«IF constraint  instanceof UnaryImpl»
			 						if (!(«getExpressionString(constraint)»)) {
			 							document.getElementById('«group.name»«groupedFeat.name»').disabled = true;
			 						}
			 					«ELSEIF constraint instanceof BinaryImpl»
			 						«val con = constraint as BinaryImpl»
			 						if (!(«getExpressionString(con.leftExp)» «getOperator(con.operator.literal)» «getExpressionString(con.rightExp)»)) {
			 							document.getElementById('«group.name»«groupedFeat.name»').disabled = true;
			 						}
			 					«ELSE»
			 						if (!(«getExpressionString(constraint)»)) {
			 							document.getElementById('«group.name»«groupedFeat.name»').disabled = true;
			 						}
			 					«ENDIF»
			 				«ENDFOR»
			 			«ENDFOR»
			 		«ENDIF»
			 		«IF group instanceof OrImpl»
			 			«FOR groupedFeat : group.grouped»
			 				form.«group.name»«groupedFeat.name».disabled = false;
			 					«FOR constraint : groupedFeat.constrains»
			 						«IF constraint instanceof UnaryImpl»
			 							if (!(«getExpressionString(constraint)»)) {
			 								form.«group.name»«groupedFeat.name».disabled = true;
			 							}
			 						«ELSEIF constraint instanceof BinaryImpl»
			 							«val con = constraint as BinaryImpl»
			 							if (!(«getExpressionString(con.leftExp)» «getOperator(con.operator.literal)» «getExpressionString(con.rightExp)»)) {
			 								form.«group.name»«groupedFeat.name».disabled = true;
			 							}
			 						«ELSE»
			 							if (!(«getExpressionString(constraint)»)){
			 								form.«group.name»«groupedFeat.name».disabled = true;
			 							}
			 						«ENDIF»
			 					«ENDFOR»
			 			«ENDFOR»
			 		«ENDIF»
			 	«ENDFOR»
			 «ENDFOR»
			}
		'''
	}

	def static String getExpressionString(Constrain exp) {
		if (exp instanceof BinaryImpl) {
			return '''(«getExpressionString(exp.leftExp)» «getOperator(exp.operator.literal)» «getExpressionString(exp.rightExp)»)'''
		} else if (exp instanceof UnaryImpl) {
			if (exp.exp.featureReference.eContainer instanceof XorImpl) {
				return '''form.«getTypeOfGroup(exp.featureReference.eContainer).name».value != '«getAttributeValue(exp.exp.featureReference.attribute)»' '''
			} else {
				return '''!(form.«getTypeOfGroup(exp.exp.featureReference.eContainer).name»«getAttributeValue(exp.exp.featureReference.attribute)».checked) '''
			}
		} else if (exp.constrainValue.attributeValue != null) {
			return '''«exp.constraintValue»''';
		} else {
			if (exp.featureReference.eContainer instanceof XorImpl) {
				return '''form.«getTypeOfGroup(exp.featureReference.eContainer).name».value == '«getAttributeValue(exp.featureReference.attribute)»' '''
			} else {
				return '''form.«getTypeOfGroup(exp.featureReference.eContainer).name»«getAttributeValue(exp.featureReference.attribute)».checked '''
			}

		}
	}

	def static getOperator(String operator) {
		if (operator == 'and') {
			return '&&';
		} else if (operator == 'or') {
			return '||';
		}
		return operator;
	}

	def static getTypeOfGroup(EObject feat) {
		if (feat instanceof XorImpl) {
			return ( feat as XorImpl)
		} else if (feat instanceof OrImpl) {
			return ( feat as OrImpl)
		}
	}

	def static String getAttributeValue(Attribute attr) {

		if (attr instanceof NumberImpl) {
			return (attr as NumberImpl).value.toString;
		} else if (attr instanceof CStringImpl) {
			return (attr as CStringImpl).value;
		} else if (attr instanceof Range) {
			return (attr as RangeImpl).lower.toString.concat("." + (attr as RangeImpl).upper.toString);
		} else if (attr instanceof CBoolean) {
			return (attr as CBoolean).value.toString;
		}

	}

	def static String getConstraintValue(Constrain constraint) {
		if (constraint.constrainValue instanceof NumberImpl) {
			return (constraint.constrainValue as NumberImpl).value.toString;
		} else if (constraint.constrainValue instanceof CStringImpl) {
			return (constraint.constrainValue as NumberImpl).value.toString;
		} else if (constraint.constrainValue instanceof CBooleanImpl) {
			return (constraint.constrainValue as CBoolean).value.toString;
		}
		return "";
	}

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		try {
			resource.allContents.filter(typeof(Model)).forEach [ it |
				fsa.generateFile(it.root.name.toLowerCase + "_configurator.html", it.compileToHtml)
				fsa.generateFile(it.root.name.toLowerCase + "_configurator.js", it.compileToJavascript)
				fsa.generateFile(it.root.name.toLowerCase + "_configurator.json", it.compileToJson)
			]
		} catch (ConcurrentModificationException ignored) {
			print("FISSE")
		}
	}
}