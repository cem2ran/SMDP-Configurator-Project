/*
 * generated by Xtext
 */
package dk.itu.mdd.configurator.validation


import modelMDD2.Binary
import modelMDD2.Feature
import modelMDD2.Group
import modelMDD2.ModelMDD2Package
import org.eclipse.xtext.validation.Check
import dk.itu.mdd.configurator.Constraints
import modelMDD2.impl.GroupImpl
import modelMDD2.Attribute
import modelMDD2.ComparativeOperator
import modelMDD2.impl.AttributeImpl
import modelMDD2.Grouped

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ConfValidator extends AbstractConfValidator {

  public static val INVALID_NAME = 'invalidName'

	@Check
	def featureStartsWithCapital(Feature feature) {
		if (!Constraints.featureStartsWithCapital(feature)) {
			warning('Name should start with a capital', 
					ModelMDD2Package.Literals.NAMED_ELEMENT__NAME,
					INVALID_NAME)
		}
	}
	
	@Check
	def featureNameDifferentFromGroupName (Group it) {
	 	if(!Constraints.featureNameDifferentFromGroupName(it))
	 		error('Your group contains a feature with the same name as the group itself', 
					ModelMDD2Package.Literals.NAMED_ELEMENT__NAME,
					INVALID_NAME)
	}
	
	@Check
	def featureNamesAreDistinct(GroupImpl it){
		if(!Constraints.featureNameAreDistinct(it))
		error('Duplicate feature names', 
					ModelMDD2Package.Literals.NAMED_ELEMENT__NAME,
					INVALID_NAME)
	}

	@Check
	def typeCheck(Binary exp){
		if(!Constraints.typeCheck(exp))
		error('Invalid Type comparison', 
					ModelMDD2Package.Literals.NAMED_ELEMENT__NAME,
					INVALID_NAME)	
	}
	
	@Check
  	def validationCheck(Binary exp) {
    if(!Constraints.constraint(exp))
    error('Cannot compare those values', 
					ModelMDD2Package.Literals.NAMED_ELEMENT__NAME,
					INVALID_NAME)
    }
	
	@Check
	def RangeCheck(Grouped feat){
		if(!Constraints.checkRangeValidity(feat))
		error('Range is not valid', 
					ModelMDD2Package.Literals.NAMED_ELEMENT__NAME,
					INVALID_NAME)	
	}
	
	
}
