// automatically generated by Xtext
grammar dk.itu.mdd.configurator.Conf with org.eclipse.xtext.common.Terminals

import "platform:/resource/ConfiguratorDSL/model/modelMDD2.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
		 root=Feature_Impl
	;
	
terminal NULL: 'null';

Feature returns Feature:
	Feature_Impl | Grouped | Mandatory | Optional;

Solitary returns Solitary:
	Mandatory | Optional;

Constrain returns Constrain: //Binary | Unary;
	Conjunction ( {Binary.leftExp=current} Operator='||' rightExp=Conjunction )* ;
Conjunction returns Constrain: 
	Comparison ( {Binary.leftExp=current} Operator='&&' rightExp=Comparison )* ;
Comparison returns Constrain: 
	Binary ( {Binary.leftExp=current} Operator=('=='|'!='|'<='|'<'|'>='|'>') rightExp=Binary )* ;
Binary returns Constrain:
	Primary ({Binary.leftExp=current} rightExp=Primary )* ;	
Primary	returns Constrain: 
	constrainFeatures+=[Feature|EString] ('.' constrainFeatures+=[Feature|EString])* | Unary | '(' Constrain ')';
Unary returns Constrain:
	{Unary} Operator=("!"|"-") exp=Primary 
;

Group returns Group:
	Or | Xor
	;


EString returns ecore::EString:
	STRING | ID | NULL;

Feature_Impl returns Feature:
	'Feature'
	name=EString
		( BEGIN subfeature+=Solitary ( subfeature+=Solitary)* END)?
		( '[' constrains+=Constrain ( "," constrains+=Constrain)* ']' )?
		;

Grouped:
		name=EString
		( '['  constrains+=Constrain ( "," constrains+=Constrain)* ']' )? 
	;

Mandatory:
	name=EString
		('{' subfeature+=Solitary ( "," subfeature+=Solitary)* '}' )?
		( '[' constrains+=Constrain ( "," constrains+=Constrain)* ']' )?
		( groups+=Group ( groups+=Group)* )?
	;

Optional:
	'?'
	name=EString
		('{' subfeature+=Solitary ( "," subfeature+=Solitary)* '}' )?
		('[' constrains+=Constrain ( "," constrains+=Constrain)* ']' )?
		( groups+=Group ( groups+=Group)* )?
	;

Or:
 	'Or' name=EString
		(BEGIN grouped+=Grouped ((',')* grouped+=Grouped)* END)?
	;

Xor:
	'Xor' name=EString
		(BEGIN grouped+=Grouped ((',')* grouped+=Grouped)* END)?
		;
	
// The following synthetic tokens are used for the indentation-aware blocks
terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation
	