/*
 * generated by Xtext
 */
package dk.itu.mdd.configurator.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ConfGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cRootAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootFeature_ImplParserRuleCall_0 = (RuleCall)cRootAssignment.eContents().get(0);
		
		//Model: //name=EString
		//	root=Feature_Impl;
		@Override public ParserRule getRule() { return rule; }

		////name=EString
		//root=Feature_Impl
		public Assignment getRootAssignment() { return cRootAssignment; }

		//Feature_Impl
		public RuleCall getRootFeature_ImplParserRuleCall_0() { return cRootFeature_ImplParserRuleCall_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeature_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMandatoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOptionalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Feature:
		//	Feature_Impl | Grouped | Mandatory | Optional;
		@Override public ParserRule getRule() { return rule; }

		//Feature_Impl | Grouped | Mandatory | Optional
		public Alternatives getAlternatives() { return cAlternatives; }

		//Feature_Impl
		public RuleCall getFeature_ImplParserRuleCall_0() { return cFeature_ImplParserRuleCall_0; }

		//Grouped
		public RuleCall getGroupedParserRuleCall_1() { return cGroupedParserRuleCall_1; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_2() { return cMandatoryParserRuleCall_2; }

		//Optional
		public RuleCall getOptionalParserRuleCall_3() { return cOptionalParserRuleCall_3; }
	}

	public class SolitaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Solitary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Solitary:
		//	Mandatory | Optional;
		@Override public ParserRule getRule() { return rule; }

		//Mandatory | Optional
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_0() { return cMandatoryParserRuleCall_0; }

		//Optional
		public RuleCall getOptionalParserRuleCall_1() { return cOptionalParserRuleCall_1; }
	}

	public class ConstrainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constrain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpConjunctionParserRuleCall_1_2_0 = (RuleCall)cRightExpAssignment_1_2.eContents().get(0);
		
		/// *
		//Constrain returns Constrain: //Binary | Unary;
		//	Conjunction ( {Binary.leftExp=current}  Operator='||' constrainFeatures+=[Feature|EString] rightExp=Conjunction )* ;
		//Conjunction returns Constrain: 
		//	Comparison ( {Binary.leftExp=current} Operator='&&' constrainFeatures+=[Feature|EString] rightExp=Comparison )* ;
		//Comparison returns Constrain: 
		//	Binary ( {Binary.leftExp=current} Operator=('=='|'!='|'<='|'<'|'>='|'>') constrainFeatures+=[Feature|EString] rightExp=Binary )* ;
		//Binary returns Constrain:
		//	Primary ({Binary.leftExp=current} '.' constrainFeatures+=[Feature|EString] rightExp=Primary )* ;	
		//Unary returns Constrain:
		//	{Unary} Operator=("!"|"-") constrainFeatures+=[Feature|EString] exp=Primary  
		//;
		//Primary	returns Constrain: 
		//	name=ID | Unary | '('Constrain')';
		// * / //Binary | Unary;
		//Constrain:
		//	Conjunction ({Binary.leftExp=current} Operator="||" rightExp=Conjunction)*;
		@Override public ParserRule getRule() { return rule; }

		//Conjunction ({Binary.leftExp=current} Operator="||" rightExp=Conjunction)*
		public Group getGroup() { return cGroup; }

		//Conjunction
		public RuleCall getConjunctionParserRuleCall_0() { return cConjunctionParserRuleCall_0; }

		//({Binary.leftExp=current} Operator="||" rightExp=Conjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.leftExp=current}
		public Action getBinaryLeftExpAction_1_0() { return cBinaryLeftExpAction_1_0; }

		//Operator="||"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"||"
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0; }

		//rightExp=Conjunction
		public Assignment getRightExpAssignment_1_2() { return cRightExpAssignment_1_2; }

		//Conjunction
		public RuleCall getRightExpConjunctionParserRuleCall_1_2_0() { return cRightExpConjunctionParserRuleCall_1_2_0; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpComparisonParserRuleCall_1_2_0 = (RuleCall)cRightExpAssignment_1_2.eContents().get(0);
		
		//Conjunction returns Constrain:
		//	Comparison ({Binary.leftExp=current} Operator="&&" rightExp=Comparison)*;
		@Override public ParserRule getRule() { return rule; }

		//Comparison ({Binary.leftExp=current} Operator="&&" rightExp=Comparison)*
		public Group getGroup() { return cGroup; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//({Binary.leftExp=current} Operator="&&" rightExp=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.leftExp=current}
		public Action getBinaryLeftExpAction_1_0() { return cBinaryLeftExpAction_1_0; }

		//Operator="&&"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"&&"
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0; }

		//rightExp=Comparison
		public Assignment getRightExpAssignment_1_2() { return cRightExpAssignment_1_2; }

		//Comparison
		public RuleCall getRightExpComparisonParserRuleCall_1_2_0() { return cRightExpComparisonParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpBinaryParserRuleCall_1_2_0 = (RuleCall)cRightExpAssignment_1_2.eContents().get(0);
		
		//Comparison returns Constrain:
		//	Binary ({Binary.leftExp=current} Operator=("==" | "!=" | "<=" | "<" | ">=" | ">") rightExp=Binary)*;
		@Override public ParserRule getRule() { return rule; }

		//Binary ({Binary.leftExp=current} Operator=("==" | "!=" | "<=" | "<" | ">=" | ">") rightExp=Binary)*
		public Group getGroup() { return cGroup; }

		//Binary
		public RuleCall getBinaryParserRuleCall_0() { return cBinaryParserRuleCall_0; }

		//({Binary.leftExp=current} Operator=("==" | "!=" | "<=" | "<" | ">=" | ">") rightExp=Binary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.leftExp=current}
		public Action getBinaryLeftExpAction_1_0() { return cBinaryLeftExpAction_1_0; }

		//Operator=("==" | "!=" | "<=" | "<" | ">=" | ">")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"==" | "!=" | "<=" | "<" | ">=" | ">"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"=="
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_2() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_2; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_1_0_3() { return cOperatorLessThanSignKeyword_1_1_0_3; }

		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_4() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_4; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_5() { return cOperatorGreaterThanSignKeyword_1_1_0_5; }

		//rightExp=Binary
		public Assignment getRightExpAssignment_1_2() { return cRightExpAssignment_1_2; }

		//Binary
		public RuleCall getRightExpBinaryParserRuleCall_1_2_0() { return cRightExpBinaryParserRuleCall_1_2_0; }
	}

	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightExpAssignment_1_1.eContents().get(0);
		
		//Binary returns Constrain:
		//	Primary ({Binary.leftExp=current} rightExp=Primary)*;
		@Override public ParserRule getRule() { return rule; }

		//Primary ({Binary.leftExp=current} rightExp=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Binary.leftExp=current} rightExp=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.leftExp=current}
		public Action getBinaryLeftExpAction_1_0() { return cBinaryLeftExpAction_1_0; }

		//rightExp=Primary
		public Assignment getRightExpAssignment_1_1() { return cRightExpAssignment_1_1; }

		//Primary
		public RuleCall getRightExpPrimaryParserRuleCall_1_1_0() { return cRightExpPrimaryParserRuleCall_1_1_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cConstrainFeaturesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cConstrainFeaturesFeatureCrossReference_0_0_0 = (CrossReference)cConstrainFeaturesAssignment_0_0.eContents().get(0);
		private final RuleCall cConstrainFeaturesFeatureEStringParserRuleCall_0_0_0_1 = (RuleCall)cConstrainFeaturesFeatureCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cConstrainFeaturesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cConstrainFeaturesFeatureCrossReference_0_1_1_0 = (CrossReference)cConstrainFeaturesAssignment_0_1_1.eContents().get(0);
		private final RuleCall cConstrainFeaturesFeatureEStringParserRuleCall_0_1_1_0_1 = (RuleCall)cConstrainFeaturesFeatureCrossReference_0_1_1_0.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cConstrainParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary returns Constrain:
		//	constrainFeatures+=[Feature|EString] ("." constrainFeatures+=[Feature|EString])* | Unary | "(" Constrain ")";
		@Override public ParserRule getRule() { return rule; }

		//constrainFeatures+=[Feature|EString] ("." constrainFeatures+=[Feature|EString])* | Unary | "(" Constrain ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//constrainFeatures+=[Feature|EString] ("." constrainFeatures+=[Feature|EString])*
		public Group getGroup_0() { return cGroup_0; }

		//constrainFeatures+=[Feature|EString]
		public Assignment getConstrainFeaturesAssignment_0_0() { return cConstrainFeaturesAssignment_0_0; }

		//[Feature|EString]
		public CrossReference getConstrainFeaturesFeatureCrossReference_0_0_0() { return cConstrainFeaturesFeatureCrossReference_0_0_0; }

		//EString
		public RuleCall getConstrainFeaturesFeatureEStringParserRuleCall_0_0_0_1() { return cConstrainFeaturesFeatureEStringParserRuleCall_0_0_0_1; }

		//("." constrainFeatures+=[Feature|EString])*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }

		//constrainFeatures+=[Feature|EString]
		public Assignment getConstrainFeaturesAssignment_0_1_1() { return cConstrainFeaturesAssignment_0_1_1; }

		//[Feature|EString]
		public CrossReference getConstrainFeaturesFeatureCrossReference_0_1_1_0() { return cConstrainFeaturesFeatureCrossReference_0_1_1_0; }

		//EString
		public RuleCall getConstrainFeaturesFeatureEStringParserRuleCall_0_1_1_0_1() { return cConstrainFeaturesFeatureEStringParserRuleCall_0_1_1_0_1; }

		//Unary
		public RuleCall getUnaryParserRuleCall_1() { return cUnaryParserRuleCall_1; }

		//"(" Constrain ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//Constrain
		public RuleCall getConstrainParserRuleCall_2_1() { return cConstrainParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorExclamationMarkKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpPrimaryParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Unary returns Constrain:
		//	{Unary} Operator=("!" | "-") exp=Primary;
		@Override public ParserRule getRule() { return rule; }

		//{Unary} Operator=("!" | "-") exp=Primary
		public Group getGroup() { return cGroup; }

		//{Unary}
		public Action getUnaryAction_0() { return cUnaryAction_0; }

		//Operator=("!" | "-")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//"!" | "-"
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }

		//"!"
		public Keyword getOperatorExclamationMarkKeyword_1_0_0() { return cOperatorExclamationMarkKeyword_1_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_0_1() { return cOperatorHyphenMinusKeyword_1_0_1; }

		//exp=Primary
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Primary
		public RuleCall getExpPrimaryParserRuleCall_2_0() { return cExpPrimaryParserRuleCall_2_0; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Group:
		//	Or | Xor;
		@Override public ParserRule getRule() { return rule; }

		//Or | Xor
		public Alternatives getAlternatives() { return cAlternatives; }

		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }

		//Xor
		public RuleCall getXorParserRuleCall_1() { return cXorParserRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNULLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EString returns ecore::EString:
		//	STRING | ID | NULL;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID | NULL
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//NULL
		public RuleCall getNULLTerminalRuleCall_2() { return cNULLTerminalRuleCall_2; }
	}

	public class Feature_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cSubfeatureAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubfeatureSolitaryParserRuleCall_2_1_0 = (RuleCall)cSubfeatureAssignment_2_1.eContents().get(0);
		private final Assignment cSubfeatureAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSubfeatureSolitaryParserRuleCall_2_2_0 = (RuleCall)cSubfeatureAssignment_2_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstrainsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstrainsConstrainParserRuleCall_3_1_0 = (RuleCall)cConstrainsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cConstrainsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cConstrainsConstrainParserRuleCall_3_2_1_0 = (RuleCall)cConstrainsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Feature_Impl returns Feature:
		//	"Feature" name=EString (BEGIN subfeature+=Solitary subfeature+=Solitary* END)? ("[" constrains+=Constrain (","
		//	constrains+=Constrain)* "]")?;
		@Override public ParserRule getRule() { return rule; }

		//"Feature" name=EString (BEGIN subfeature+=Solitary subfeature+=Solitary* END)? ("[" constrains+=Constrain (","
		//constrains+=Constrain)* "]")?
		public Group getGroup() { return cGroup; }

		//"Feature"
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//(BEGIN subfeature+=Solitary subfeature+=Solitary* END)?
		public Group getGroup_2() { return cGroup_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_0() { return cBEGINTerminalRuleCall_2_0; }

		//subfeature+=Solitary
		public Assignment getSubfeatureAssignment_2_1() { return cSubfeatureAssignment_2_1; }

		//Solitary
		public RuleCall getSubfeatureSolitaryParserRuleCall_2_1_0() { return cSubfeatureSolitaryParserRuleCall_2_1_0; }

		//subfeature+=Solitary*
		public Assignment getSubfeatureAssignment_2_2() { return cSubfeatureAssignment_2_2; }

		//Solitary
		public RuleCall getSubfeatureSolitaryParserRuleCall_2_2_0() { return cSubfeatureSolitaryParserRuleCall_2_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_2_3() { return cENDTerminalRuleCall_2_3; }

		//("[" constrains+=Constrain ("," constrains+=Constrain)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//constrains+=Constrain
		public Assignment getConstrainsAssignment_3_1() { return cConstrainsAssignment_3_1; }

		//Constrain
		public RuleCall getConstrainsConstrainParserRuleCall_3_1_0() { return cConstrainsConstrainParserRuleCall_3_1_0; }

		//("," constrains+=Constrain)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//constrains+=Constrain
		public Assignment getConstrainsAssignment_3_2_1() { return cConstrainsAssignment_3_2_1; }

		//Constrain
		public RuleCall getConstrainsConstrainParserRuleCall_3_2_1_0() { return cConstrainsConstrainParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class GroupedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grouped");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstrainsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstrainsConstrainParserRuleCall_1_1_0 = (RuleCall)cConstrainsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cConstrainsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cConstrainsConstrainParserRuleCall_1_2_1_0 = (RuleCall)cConstrainsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Grouped:
		//	name=EString ("[" constrains+=Constrain ("," constrains+=Constrain)* "]")?;
		@Override public ParserRule getRule() { return rule; }

		//name=EString ("[" constrains+=Constrain ("," constrains+=Constrain)* "]")?
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//("[" constrains+=Constrain ("," constrains+=Constrain)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//constrains+=Constrain
		public Assignment getConstrainsAssignment_1_1() { return cConstrainsAssignment_1_1; }

		//Constrain
		public RuleCall getConstrainsConstrainParserRuleCall_1_1_0() { return cConstrainsConstrainParserRuleCall_1_1_0; }

		//("," constrains+=Constrain)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//constrains+=Constrain
		public Assignment getConstrainsAssignment_1_2_1() { return cConstrainsAssignment_1_2_1; }

		//Constrain
		public RuleCall getConstrainsConstrainParserRuleCall_1_2_1_0() { return cConstrainsConstrainParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubfeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubfeatureSolitaryParserRuleCall_1_1_0 = (RuleCall)cSubfeatureAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubfeatureAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubfeatureSolitaryParserRuleCall_1_2_1_0 = (RuleCall)cSubfeatureAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstrainsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstrainsConstrainParserRuleCall_2_1_0 = (RuleCall)cConstrainsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cConstrainsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cConstrainsConstrainParserRuleCall_2_2_1_0 = (RuleCall)cConstrainsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cGroupsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cGroupsGroupParserRuleCall_3_0_0 = (RuleCall)cGroupsAssignment_3_0.eContents().get(0);
		private final Assignment cGroupsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_3_1_0 = (RuleCall)cGroupsAssignment_3_1.eContents().get(0);
		
		//Mandatory:
		//	name=EString ("{" subfeature+=Solitary ("," subfeature+=Solitary)* "}")? ("[" constrains+=Constrain (","
		//	constrains+=Constrain)* "]")? (groups+=Group groups+=Group*)?;
		@Override public ParserRule getRule() { return rule; }

		//name=EString ("{" subfeature+=Solitary ("," subfeature+=Solitary)* "}")? ("[" constrains+=Constrain (","
		//constrains+=Constrain)* "]")? (groups+=Group groups+=Group*)?
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//("{" subfeature+=Solitary ("," subfeature+=Solitary)* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//subfeature+=Solitary
		public Assignment getSubfeatureAssignment_1_1() { return cSubfeatureAssignment_1_1; }

		//Solitary
		public RuleCall getSubfeatureSolitaryParserRuleCall_1_1_0() { return cSubfeatureSolitaryParserRuleCall_1_1_0; }

		//("," subfeature+=Solitary)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//subfeature+=Solitary
		public Assignment getSubfeatureAssignment_1_2_1() { return cSubfeatureAssignment_1_2_1; }

		//Solitary
		public RuleCall getSubfeatureSolitaryParserRuleCall_1_2_1_0() { return cSubfeatureSolitaryParserRuleCall_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }

		//("[" constrains+=Constrain ("," constrains+=Constrain)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//constrains+=Constrain
		public Assignment getConstrainsAssignment_2_1() { return cConstrainsAssignment_2_1; }

		//Constrain
		public RuleCall getConstrainsConstrainParserRuleCall_2_1_0() { return cConstrainsConstrainParserRuleCall_2_1_0; }

		//("," constrains+=Constrain)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//constrains+=Constrain
		public Assignment getConstrainsAssignment_2_2_1() { return cConstrainsAssignment_2_2_1; }

		//Constrain
		public RuleCall getConstrainsConstrainParserRuleCall_2_2_1_0() { return cConstrainsConstrainParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//(groups+=Group groups+=Group*)?
		public Group getGroup_3() { return cGroup_3; }

		//groups+=Group
		public Assignment getGroupsAssignment_3_0() { return cGroupsAssignment_3_0; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_3_0_0() { return cGroupsGroupParserRuleCall_3_0_0; }

		//groups+=Group*
		public Assignment getGroupsAssignment_3_1() { return cGroupsAssignment_3_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_3_1_0() { return cGroupsGroupParserRuleCall_3_1_0; }
	}

	public class OptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Optional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubfeatureAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubfeatureSolitaryParserRuleCall_2_1_0 = (RuleCall)cSubfeatureAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSubfeatureAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSubfeatureSolitaryParserRuleCall_2_2_1_0 = (RuleCall)cSubfeatureAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstrainsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstrainsConstrainParserRuleCall_3_1_0 = (RuleCall)cConstrainsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cConstrainsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cConstrainsConstrainParserRuleCall_3_2_1_0 = (RuleCall)cConstrainsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cGroupsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cGroupsGroupParserRuleCall_4_0_0 = (RuleCall)cGroupsAssignment_4_0.eContents().get(0);
		private final Assignment cGroupsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_4_1_0 = (RuleCall)cGroupsAssignment_4_1.eContents().get(0);
		
		//Optional:
		//	"?" name=EString ("{" subfeature+=Solitary ("," subfeature+=Solitary)* "}")? ("[" constrains+=Constrain (","
		//	constrains+=Constrain)* "]")? (groups+=Group groups+=Group*)?;
		@Override public ParserRule getRule() { return rule; }

		//"?" name=EString ("{" subfeature+=Solitary ("," subfeature+=Solitary)* "}")? ("[" constrains+=Constrain (","
		//constrains+=Constrain)* "]")? (groups+=Group groups+=Group*)?
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("{" subfeature+=Solitary ("," subfeature+=Solitary)* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//subfeature+=Solitary
		public Assignment getSubfeatureAssignment_2_1() { return cSubfeatureAssignment_2_1; }

		//Solitary
		public RuleCall getSubfeatureSolitaryParserRuleCall_2_1_0() { return cSubfeatureSolitaryParserRuleCall_2_1_0; }

		//("," subfeature+=Solitary)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//subfeature+=Solitary
		public Assignment getSubfeatureAssignment_2_2_1() { return cSubfeatureAssignment_2_2_1; }

		//Solitary
		public RuleCall getSubfeatureSolitaryParserRuleCall_2_2_1_0() { return cSubfeatureSolitaryParserRuleCall_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//("[" constrains+=Constrain ("," constrains+=Constrain)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//constrains+=Constrain
		public Assignment getConstrainsAssignment_3_1() { return cConstrainsAssignment_3_1; }

		//Constrain
		public RuleCall getConstrainsConstrainParserRuleCall_3_1_0() { return cConstrainsConstrainParserRuleCall_3_1_0; }

		//("," constrains+=Constrain)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//constrains+=Constrain
		public Assignment getConstrainsAssignment_3_2_1() { return cConstrainsAssignment_3_2_1; }

		//Constrain
		public RuleCall getConstrainsConstrainParserRuleCall_3_2_1_0() { return cConstrainsConstrainParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }

		//(groups+=Group groups+=Group*)?
		public Group getGroup_4() { return cGroup_4; }

		//groups+=Group
		public Assignment getGroupsAssignment_4_0() { return cGroupsAssignment_4_0; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_4_0_0() { return cGroupsGroupParserRuleCall_4_0_0; }

		//groups+=Group*
		public Assignment getGroupsAssignment_4_1() { return cGroupsAssignment_4_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_4_1_0() { return cGroupsGroupParserRuleCall_4_1_0; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cGroupedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGroupedGroupedParserRuleCall_2_1_0 = (RuleCall)cGroupedAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cGroupedAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cGroupedGroupedParserRuleCall_2_2_1_0 = (RuleCall)cGroupedAssignment_2_2_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//Or:
		//	"Or" name=EString (BEGIN grouped+=Grouped (","* grouped+=Grouped)* END)?;
		@Override public ParserRule getRule() { return rule; }

		//"Or" name=EString (BEGIN grouped+=Grouped (","* grouped+=Grouped)* END)?
		public Group getGroup() { return cGroup; }

		//"Or"
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//(BEGIN grouped+=Grouped (","* grouped+=Grouped)* END)?
		public Group getGroup_2() { return cGroup_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_0() { return cBEGINTerminalRuleCall_2_0; }

		//grouped+=Grouped
		public Assignment getGroupedAssignment_2_1() { return cGroupedAssignment_2_1; }

		//Grouped
		public RuleCall getGroupedGroupedParserRuleCall_2_1_0() { return cGroupedGroupedParserRuleCall_2_1_0; }

		//(","* grouped+=Grouped)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","*
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//grouped+=Grouped
		public Assignment getGroupedAssignment_2_2_1() { return cGroupedAssignment_2_2_1; }

		//Grouped
		public RuleCall getGroupedGroupedParserRuleCall_2_2_1_0() { return cGroupedGroupedParserRuleCall_2_2_1_0; }

		//END
		public RuleCall getENDTerminalRuleCall_2_3() { return cENDTerminalRuleCall_2_3; }
	}

	public class XorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Xor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cGroupedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGroupedGroupedParserRuleCall_2_1_0 = (RuleCall)cGroupedAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cGroupedAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cGroupedGroupedParserRuleCall_2_2_1_0 = (RuleCall)cGroupedAssignment_2_2_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//Xor:
		//	"Xor" name=EString (BEGIN grouped+=Grouped (","* grouped+=Grouped)* END)?;
		@Override public ParserRule getRule() { return rule; }

		//"Xor" name=EString (BEGIN grouped+=Grouped (","* grouped+=Grouped)* END)?
		public Group getGroup() { return cGroup; }

		//"Xor"
		public Keyword getXorKeyword_0() { return cXorKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//(BEGIN grouped+=Grouped (","* grouped+=Grouped)* END)?
		public Group getGroup_2() { return cGroup_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_0() { return cBEGINTerminalRuleCall_2_0; }

		//grouped+=Grouped
		public Assignment getGroupedAssignment_2_1() { return cGroupedAssignment_2_1; }

		//Grouped
		public RuleCall getGroupedGroupedParserRuleCall_2_1_0() { return cGroupedGroupedParserRuleCall_2_1_0; }

		//(","* grouped+=Grouped)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","*
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//grouped+=Grouped
		public Assignment getGroupedAssignment_2_2_1() { return cGroupedAssignment_2_2_1; }

		//Grouped
		public RuleCall getGroupedGroupedParserRuleCall_2_2_1_0() { return cGroupedGroupedParserRuleCall_2_2_1_0; }

		//END
		public RuleCall getENDTerminalRuleCall_2_3() { return cENDTerminalRuleCall_2_3; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tNULL;
	private final FeatureElements pFeature;
	private final SolitaryElements pSolitary;
	private final ConstrainElements pConstrain;
	private final ConjunctionElements pConjunction;
	private final ComparisonElements pComparison;
	private final BinaryElements pBinary;
	private final PrimaryElements pPrimary;
	private final UnaryElements pUnary;
	private final GroupElements pGroup;
	private final EStringElements pEString;
	private final Feature_ImplElements pFeature_Impl;
	private final GroupedElements pGrouped;
	private final MandatoryElements pMandatory;
	private final OptionalElements pOptional;
	private final OrElements pOr;
	private final XorElements pXor;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConfGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NULL");
		this.pFeature = new FeatureElements();
		this.pSolitary = new SolitaryElements();
		this.pConstrain = new ConstrainElements();
		this.pConjunction = new ConjunctionElements();
		this.pComparison = new ComparisonElements();
		this.pBinary = new BinaryElements();
		this.pPrimary = new PrimaryElements();
		this.pUnary = new UnaryElements();
		this.pGroup = new GroupElements();
		this.pEString = new EStringElements();
		this.pFeature_Impl = new Feature_ImplElements();
		this.pGrouped = new GroupedElements();
		this.pMandatory = new MandatoryElements();
		this.pOptional = new OptionalElements();
		this.pOr = new OrElements();
		this.pXor = new XorElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.mdd.configurator.Conf".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model: //name=EString
	//	root=Feature_Impl;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return tNULL;
	} 

	//Feature:
	//	Feature_Impl | Grouped | Mandatory | Optional;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Solitary:
	//	Mandatory | Optional;
	public SolitaryElements getSolitaryAccess() {
		return pSolitary;
	}
	
	public ParserRule getSolitaryRule() {
		return getSolitaryAccess().getRule();
	}

	/// *
	//Constrain returns Constrain: //Binary | Unary;
	//	Conjunction ( {Binary.leftExp=current}  Operator='||' constrainFeatures+=[Feature|EString] rightExp=Conjunction )* ;
	//Conjunction returns Constrain: 
	//	Comparison ( {Binary.leftExp=current} Operator='&&' constrainFeatures+=[Feature|EString] rightExp=Comparison )* ;
	//Comparison returns Constrain: 
	//	Binary ( {Binary.leftExp=current} Operator=('=='|'!='|'<='|'<'|'>='|'>') constrainFeatures+=[Feature|EString] rightExp=Binary )* ;
	//Binary returns Constrain:
	//	Primary ({Binary.leftExp=current} '.' constrainFeatures+=[Feature|EString] rightExp=Primary )* ;	
	//Unary returns Constrain:
	//	{Unary} Operator=("!"|"-") constrainFeatures+=[Feature|EString] exp=Primary  
	//;
	//Primary	returns Constrain: 
	//	name=ID | Unary | '('Constrain')';
	// * / //Binary | Unary;
	//Constrain:
	//	Conjunction ({Binary.leftExp=current} Operator="||" rightExp=Conjunction)*;
	public ConstrainElements getConstrainAccess() {
		return pConstrain;
	}
	
	public ParserRule getConstrainRule() {
		return getConstrainAccess().getRule();
	}

	//Conjunction returns Constrain:
	//	Comparison ({Binary.leftExp=current} Operator="&&" rightExp=Comparison)*;
	public ConjunctionElements getConjunctionAccess() {
		return pConjunction;
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Comparison returns Constrain:
	//	Binary ({Binary.leftExp=current} Operator=("==" | "!=" | "<=" | "<" | ">=" | ">") rightExp=Binary)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Binary returns Constrain:
	//	Primary ({Binary.leftExp=current} rightExp=Primary)*;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}

	//Primary returns Constrain:
	//	constrainFeatures+=[Feature|EString] ("." constrainFeatures+=[Feature|EString])* | Unary | "(" Constrain ")";
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Unary returns Constrain:
	//	{Unary} Operator=("!" | "-") exp=Primary;
	public UnaryElements getUnaryAccess() {
		return pUnary;
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}

	//Group:
	//	Or | Xor;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID | NULL;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Feature_Impl returns Feature:
	//	"Feature" name=EString (BEGIN subfeature+=Solitary subfeature+=Solitary* END)? ("[" constrains+=Constrain (","
	//	constrains+=Constrain)* "]")?;
	public Feature_ImplElements getFeature_ImplAccess() {
		return pFeature_Impl;
	}
	
	public ParserRule getFeature_ImplRule() {
		return getFeature_ImplAccess().getRule();
	}

	//Grouped:
	//	name=EString ("[" constrains+=Constrain ("," constrains+=Constrain)* "]")?;
	public GroupedElements getGroupedAccess() {
		return pGrouped;
	}
	
	public ParserRule getGroupedRule() {
		return getGroupedAccess().getRule();
	}

	//Mandatory:
	//	name=EString ("{" subfeature+=Solitary ("," subfeature+=Solitary)* "}")? ("[" constrains+=Constrain (","
	//	constrains+=Constrain)* "]")? (groups+=Group groups+=Group*)?;
	public MandatoryElements getMandatoryAccess() {
		return pMandatory;
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//Optional:
	//	"?" name=EString ("{" subfeature+=Solitary ("," subfeature+=Solitary)* "}")? ("[" constrains+=Constrain (","
	//	constrains+=Constrain)* "]")? (groups+=Group groups+=Group*)?;
	public OptionalElements getOptionalAccess() {
		return pOptional;
	}
	
	public ParserRule getOptionalRule() {
		return getOptionalAccess().getRule();
	}

	//Or:
	//	"Or" name=EString (BEGIN grouped+=Grouped (","* grouped+=Grouped)* END)?;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Xor:
	//	"Xor" name=EString (BEGIN grouped+=Grouped (","* grouped+=Grouped)* END)?;
	public XorElements getXorAccess() {
		return pXor;
	}
	
	public ParserRule getXorRule() {
		return getXorAccess().getRule();
	}

	//// The following synthetic tokens are used for the indentation-aware blocks
	//// increase indentation
	//terminal BEGIN:
	//	"synthetic:BEGIN";
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	} 

	//// decrease indentation
	//terminal END:
	//	"synthetic:END";
	public TerminalRule getENDRule() {
		return tEND;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
