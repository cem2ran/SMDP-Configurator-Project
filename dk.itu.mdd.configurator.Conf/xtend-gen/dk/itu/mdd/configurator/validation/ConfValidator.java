/**
 * generated by Xtext
 */
package dk.itu.mdd.configurator.validation;

import dk.itu.mdd.configurator.Constraints;
import dk.itu.mdd.configurator.validation.AbstractConfValidator;
import modelMDD2.Binary;
import modelMDD2.Feature;
import modelMDD2.Group;
import modelMDD2.Grouped;
import modelMDD2.ModelMDD2Package;
import modelMDD2.impl.GroupImpl;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ConfValidator extends AbstractConfValidator {
  public final static String INVALID_NAME = "invalidName";
  
  @Check
  public void featureStartsWithCapital(final Feature feature) {
    boolean _featureStartsWithCapital = Constraints.featureStartsWithCapital(feature);
    boolean _not = (!_featureStartsWithCapital);
    if (_not) {
      this.warning("Name should start with a capital", 
        ModelMDD2Package.Literals.NAMED_ELEMENT__NAME, 
        ConfValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void featureNameDifferentFromGroupName(final Group it) {
    boolean _featureNameDifferentFromGroupName = Constraints.featureNameDifferentFromGroupName(it);
    boolean _not = (!_featureNameDifferentFromGroupName);
    if (_not) {
      this.error("Your group contains a feature with the same name as the group itself", 
        ModelMDD2Package.Literals.NAMED_ELEMENT__NAME, 
        ConfValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void featureNamesAreDistinct(final GroupImpl it) {
    boolean _featureNameAreDistinct = Constraints.featureNameAreDistinct(it);
    boolean _not = (!_featureNameAreDistinct);
    if (_not) {
      this.error("Duplicate feature names", 
        ModelMDD2Package.Literals.NAMED_ELEMENT__NAME, 
        ConfValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void typeCheck(final Binary exp) {
    boolean _typeCheck = Constraints.typeCheck(exp);
    boolean _not = (!_typeCheck);
    if (_not) {
      this.error("Invalid Type comparison", 
        ModelMDD2Package.Literals.NAMED_ELEMENT__NAME, 
        ConfValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void validationCheck(final Binary exp) {
    Boolean _constraint = Constraints.constraint(exp);
    boolean _not = (!(_constraint).booleanValue());
    if (_not) {
      this.error("Cannot compare those values", 
        ModelMDD2Package.Literals.NAMED_ELEMENT__NAME, 
        ConfValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void RangeCheck(final Grouped feat) {
    boolean _checkRangeValidity = Constraints.checkRangeValidity(feat);
    boolean _not = (!_checkRangeValidity);
    if (_not) {
      this.error("Range is not valid", 
        ModelMDD2Package.Literals.NAMED_ELEMENT__NAME, 
        ConfValidator.INVALID_NAME);
    }
  }
}
